C251 COMPILER V5.60.0,  PD_Probe                                                           12/11/24  14:59:46  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE PD_Probe
OBJECT MODULE PLACED IN .\obj\PD_Probe.obj
COMPILER INVOKED BY: D:\KeilMDK\C251\BIN\C251.EXE Probe\PD_Probe.c XSMALL OPTIMIZE(0,SPEED) BROWSE INCDIR(.\Ads1110;.\Fl
                    -ash;.\mcp4725;.\IIC;.\MwPro;.\Uart;.\Lcd;.\ModBus;.\Probe;.\BSP;.\MwPro) PRINT(.\obj\PD_Probe.lst) OBJECT(.\obj\PD_Probe
                    -.obj) 

stmt  level    source

    1          #include "main.h"
    2          #include "ModBusHost.h"
    3          #include "ModBusDev.h"
    4          #include "PD_Probe.h"
    5          #include "ModBus.h"
    6          
    7          extern HOST_SEND_FRAME xdata  HostSendFrame;   // 发送帧
    8          extern DEVICE_READ_ACK xdata  ReadAckFrame;    // 读接收帧
    9          extern DEVICE_WRITE_ACK xdata WriteAckFrame;  // 写接收帧
   10          extern MODBUS_PD_PARAM xdata ModBusPD_Param;
   11          
   12          extern SYS_PARAM xdata SysParam;
   13          extern PROBE_REGADDR xdata ProbeRegAddr;
   14          extern float My_PDDoserate;
   15          
   16          
   17          
   18          // Count :  寄存器个数
   19          void SendReadPD(void)
   20          {
   21   1          WORD RegCnt = 12;
   22   1          HostSendCmd(RS485, (BYTE)SysParam.Pd_param.Address,CMD_READ_REG, MODBUS_DOSERATE_ADD, RegCnt, NULL);
   23   1      }
   24          
   25          void SendReadPD_DoseRate(void)
   26          {
   27   1          WORD RegCnt = 12;
   28   1          HostSendCmd(RS485, (BYTE)SysParam.Pd_param.Address,CMD_READ_REG, MODBUS_DOSERATE_ADD, RegCnt, NULL);
   29   1      }
   30          void SendReadPD_Alarm(void)
   31          {
   32   1          WORD RegCnt = 8;
   33   1          HostSendCmd(RS485, (BYTE)SysParam.Pd_param.Address,CMD_READ_REG, MODBUS_ALARM_ADD, RegCnt, NULL);
   34   1      }
   35          void SendReadPD_Thr(void)
   36          {
   37   1          WORD RegCnt = 4;
   38   1          HostSendCmd(RS485, (BYTE)SysParam.Pd_param.Address,CMD_READ_REG, MODBUS_THR_ADD, RegCnt, NULL);
   39   1      }
   40          void SendReadPD_fix(void)
   41          {
   42   1          WORD RegCnt = 32;
   43   1          HostSendCmd(RS485, (BYTE)SysParam.Pd_param.Address,CMD_READ_REG, MODBUS_FACTOR_ADD, RegCnt, NULL);
   44   1      }
   45          void SendReadPD_Info(void)
   46          {
   47   1          WORD RegCnt = 48;
   48   1          HostSendCmd(RS485, (BYTE)SysParam.Pd_param.Address,CMD_READ_REG, MODBUS_DEV_INFO, RegCnt, NULL);
   49   1      }
   50          void SendReadPD_Address(void)
   51          {
   52   1          WORD RegCnt = 1;
   53   1          HostSendCmd(RS485, (BYTE)SysParam.Pd_param.Address,CMD_READ_REG, MODBUS_DEV_ADD, RegCnt, NULL);
   54   1      }
   55          void SendReadPD_Ver(void)
   56          {
   57   1          WORD RegCnt = 1;
C251 COMPILER V5.60.0,  PD_Probe                                                           12/11/24  14:59:46  PAGE 2   

   58   1          HostSendCmd(RS485, (BYTE)SysParam.Pd_param.Address,CMD_READ_REG, MODBUS_DEV_VER, RegCnt, NULL);
   59   1      }
   60          
   61          void WritePD_Alarm()
   62          {
   63   1          WORD RegCnt = 8;
   64   1          SyncModBusDev();
   65   1          HostSendCmd(RS485,1, CMD_WRITE_REG, MODBUS_ALARM_ADD, RegCnt, (BYTE *)&ModBusPD_Param.s_Alarm);
   66   1      }
   67          
   68          void WritePD_Thr()
   69          {
   70   1          WORD RegCnt = 4;
   71   1          SyncModBusDev();
   72   1          HostSendCmd(RS485,1, CMD_WRITE_REG, MODBUS_THR_ADD, RegCnt, (BYTE *)&ModBusPD_Param.s_Thr);
   73   1      }
   74          
   75          void WritePD_fix()
   76          {
   77   1          WORD RegCnt = 32;
   78   1          SyncModBusDev();
   79   1          HostSendCmd(RS485,1, CMD_WRITE_REG, MODBUS_FACTOR_ADD, RegCnt, (BYTE *)&ModBusPD_Param.fix);
   80   1      }
   81          
   82          void WritePD_Info()
   83          {
   84   1          WORD RegCnt = 48;
   85   1          SyncModBusDev();
   86   1          HostSendCmd(RS485,1, CMD_WRITE_REG, MODBUS_DEV_INFO, RegCnt, (BYTE *)&ModBusPD_Param.s_PdInfo);
   87   1      }
   88          
   89          void WritePD_Address()
   90          {
   91   1          WORD RegCnt = 1;
   92   1          SyncModBusDev();
   93   1          HostSendCmd(RS485,1, CMD_WRITE_REG, MODBUS_DEV_ADD, RegCnt, (BYTE *)&ModBusPD_Param.Address);
   94   1      }
   95          
   96          
   97          void ModBusPDSave()
   98          {
   99   1          BYTE i = 0;
  100   1          SysParam.Pd_param.s_DoseRate.DoseRate = ModBusPD_Param.s_DoseRate.DoseRate;
  101   1          SysParam.Pd_param.s_DoseRate.DoseTotal = ModBusPD_Param.s_DoseRate.DoseTotal;
  102   1          SysParam.Pd_param.s_DoseRate.Cps1 = ModBusPD_Param.s_DoseRate.Cps1;
  103   1          SysParam.Pd_param.s_DoseRate.Cps2 = ModBusPD_Param.s_DoseRate.Cps2;
  104   1          SysParam.Pd_param.s_DoseRate.Cps3 = ModBusPD_Param.s_DoseRate.Cps3;
  105   1          //SysParam.Pd_param.s_DoseRate.DevSt = ModBusPD_Param.s_DoseRate.DevSt;
  106   1          //SysParam.Pd_param.Address = ModBusPD_Param.Address; 
  107   1      
  108   1          #if 0
                   memcpy(SysParam.Pd_param.s_PdInfo.Index,ModBusPD_Param.s_PdInfo.Index,32);
                   memcpy(SysParam.Pd_param.s_PdInfo.Location,ModBusPD_Param.s_PdInfo.Location,32);
                   memcpy(SysParam.Pd_param.s_PdInfo.Name,ModBusPD_Param.s_PdInfo.Name,32);
                   
                   
                   SysParam.Pd_param.Ver = ModBusPD_Param.Ver; 
                   
                   
                   SysParam.Pd_param.s_Alarm.DoseRatePreAlarm = ModBusPD_Param.s_Alarm.DoseRatePreAlarm;
                   SysParam.Pd_param.s_Alarm.DoseRateAlarm = ModBusPD_Param.s_Alarm.DoseRateAlarm;
                   SysParam.Pd_param.s_Alarm.DosePreAlarm = ModBusPD_Param.s_Alarm.DosePreAlarm;
                   SysParam.Pd_param.s_Alarm.DoseAlarm = ModBusPD_Param.s_Alarm.DoseAlarm;
                   for(i = 0;i<3;i++)
                   {
                       SysParam.Pd_param.s_Thr.Det_Thr[i] = ModBusPD_Param.s_Thr.Det_Thr[i];
C251 COMPILER V5.60.0,  PD_Probe                                                           12/11/24  14:59:46  PAGE 3   

                   }
                   SysParam.Pd_param.s_Thr.AnalogChannel = ModBusPD_Param.s_Thr.AnalogChannel;
                   for(i = 0;i<16;i++)
                   {
                       SysParam.Pd_param.fix[i] = ModBusPD_Param.fix[i];
                   }
                   #endif
  131   1          
  132   1          WriteParam();
  133   1      }
  134          
  135          bool WritePD_Ack()
  136          {
  137   1         return true;
  138   1      }
  139          
  140          bool Calc_PD_AlarmState()
  141          {
  142   1          static u16 DrAlarmCnt = 0;
  143   1          static u16 DrPreAlarmCnt = 0;
  144   1              SysParam.Pd_param.s_DoseRate.DevSt = 0;
  145   1          #if 0
                   /* 剂量当量报警检查 */    
                   if ((SysParam.Pd_param.s_DoseRate.DoseTotal >= SysParam.Pd_param.s_Alarm.DoseAlarm)
                       &&(SysParam.Pd_param.s_Alarm.DoseAlarm > 0)) 
                   { 
                       SysParam.Pd_param.s_DoseRate.DevSt |= DOSE_ALARM_BIT;
                   } 
                   else
                   {
                       SysParam.Pd_param.s_DoseRate.DevSt &= ~DOSE_ALARM_BIT;
                   }
                   
                   /* 剂量当量预警检查 */    
                   if( (SysParam.Pd_param.s_DoseRate.DoseTotal >= SysParam.Pd_param.s_Alarm.DosePreAlarm)
                       &&(SysParam.Pd_param.s_Alarm.DosePreAlarm > 0)
                       &&(SysParam.Pd_param.s_DoseRate.DoseTotal < SysParam.Pd_param.s_Alarm.DoseAlarm) ) 
                   { 
                       SysParam.Pd_param.s_DoseRate.DevSt |= DOSE_PRE_ALARM_BIT;
                   } 
                   else
                   {
                       SysParam.Pd_param.s_DoseRate.DevSt &= ~DOSE_PRE_ALARM_BIT;
                   }
                   #endif    
  169   1          
  170   1          /* 剂量当量率报警检查*/    
  171   1          if ( (SysParam.Pd_param.s_DoseRate.DoseRate >= SysParam.Pd_param.s_Alarm.DoseRateAlarm)
  172   1              &&(SysParam.Pd_param.s_Alarm.DoseRateAlarm > 0) ) 
  173   1          { 
  174   2              if((++DrAlarmCnt) >= MIB_CST_DOSERATE_THRESHOLD_ALARM) 
  175   2              {   
  176   3                  //连续两次报警则认为报警
  177   3                 SysParam.Pd_param.s_DoseRate.DevSt |= DOSERATE_ALARM_BIT;
  178   3              }
  179   2          } 
  180   1          else 
  181   1          {
  182   2              DrAlarmCnt= 0x0;
  183   2              SysParam.Pd_param.s_DoseRate.DevSt &= ~DOSERATE_ALARM_BIT;
  184   2          }
  185   1          
  186   1          /* 剂量当量率预警检查 */    
  187   1          if ( (SysParam.Pd_param.s_DoseRate.DoseRate >= SysParam.Pd_param.s_Alarm.DoseRatePreAlarm)
  188   1              &&(SysParam.Pd_param.s_DoseRate.DoseRate < SysParam.Pd_param.s_Alarm.DoseRateAlarm) )
  189   1          { 
C251 COMPILER V5.60.0,  PD_Probe                                                           12/11/24  14:59:46  PAGE 4   

  190   2              if((++DrPreAlarmCnt) >= MIB_CST_DOSERATE_THRESHOLD_WARNING) 
  191   2              {
  192   3                  //连续两次报警则认为报警
  193   3                  SysParam.Pd_param.s_DoseRate.DevSt |= DOSERATE_PRE_ALARM_BIT;
  194   3              }
  195   2          } 
  196   1          else 
  197   1          {
  198   2              DrPreAlarmCnt= 0x0;
  199   2              SysParam.Pd_param.s_DoseRate.DevSt &= ~DOSERATE_PRE_ALARM_BIT;
  200   2          }
  201   1      
  202   1          #if 0
                   if (SysParam.Pd_param.s_DoseRate.DoseTotal >= 10.0*1000*1000)
                   {
                       SysParam.Pd_param.s_DoseRate.DevSt |= OVER_RANGE_BIT;
                       SysParam.Pd_param.s_DoseRate.DoseTotal = 10.0*1000*1000;
                   }
                   else
                   {
                       SysParam.Pd_param.s_DoseRate.DevSt &= ~OVER_RANGE_BIT;
                   }
                   #endif
  213   1          return true;
  214   1      }
  215          
  216          
  217          
  218          void Set_PD_DoseRateUnit()
  219          {
  220   1          if(My_PDDoserate < 1000)
  221   1          {
  222   2                if(My_PDDoserate < 100)
  223   2              {
  224   3                  RunStatus.Unit = Unit_uSv;
  225   3              }
  226   2              else
  227   2              {
  228   3                  RunStatus.Unit = Unit_mSv;
  229   3                  My_PDDoserate = My_PDDoserate / 1000;
  230   3              }
  231   2          }
  232   1          else if(My_PDDoserate < 1000000)
  233   1          {
  234   2              My_PDDoserate= My_PDDoserate / 1000;
  235   2              if(My_PDDoserate < 100)
  236   2              {
  237   3                  RunStatus.Unit = Unit_mSv;
  238   3              }
  239   2              else
  240   2              {
  241   3                  RunStatus.Unit = Unit_Sv;
  242   3                  My_PDDoserate = My_PDDoserate / 1000;
  243   3              }
  244   2          }
  245   1          else
  246   1          {
  247   2              RunStatus.Unit = Unit_Sv;
  248   2              if(My_PDDoserate > 100000000)
  249   2              {
  250   3                  My_PDDoserate = 100000000;
  251   3              }
  252   2              My_PDDoserate = My_PDDoserate / 1000000;
  253   2          }
  254   1      }
  255          
C251 COMPILER V5.60.0,  PD_Probe                                                           12/11/24  14:59:46  PAGE 5   

  256          
  257          
  258          BYTE ReadPD_Ack()
  259          {
  260   1          WORD i = 0;
  261   1          WORD dat = 0;   
  262   1          if(ReadAckFrame.DataLen <= 0)
  263   1          {
  264   2              return false;
  265   2          }
  266   1         #if 0
                   if(ReadAckFrame.DataLen == 2)
                   { 
                       memcpy(&dat, ReadAckFrame.Data, 2);
                       if(dat >= 100)
                       {
                           memcpy(&ModBusPD_Param.Ver, ReadAckFrame.Data, 2);
                       }
                       else
                       {
                           memcpy(&ModBusPD_Param.Address, ReadAckFrame.Data, 2);
                       }
                   } 
                   
                   else if(ReadAckFrame.DataLen == sizeof(PD_INFO))
                   {
                       memcpy(&ModBusPD_Param.s_PdInfo, ReadAckFrame.Data,sizeof(PD_INFO));
                   } 
                   #endif
  285   1          else if(ReadAckFrame.DataLen == sizeof(ModBusPD_Param.fix))
  286   1          {
  287   2              memcpy(&ModBusPD_Param.fix, ReadAckFrame.Data,sizeof(ModBusPD_Param.fix));
  288   2          }
  289   1          else if(ReadAckFrame.DataLen == sizeof(PD_THR))
  290   1          {
  291   2              memcpy(&ModBusPD_Param.s_Thr, ReadAckFrame.Data,sizeof(PD_THR));
  292   2          }
  293   1          else if(ReadAckFrame.DataLen == sizeof(PD_ALARM))
  294   1          {
  295   2              memcpy(&ModBusPD_Param.s_Alarm, ReadAckFrame.Data,sizeof(PD_ALARM));
  296   2          }
  297   1        
  298   1          if(ReadAckFrame.DataLen == sizeof(PD_DOSERATE))
  299   1          {
  300   2              memcpy(&ModBusPD_Param.s_DoseRate, ReadAckFrame.Data,sizeof(PD_DOSERATE));
  301   2          }
  302   1          ModBusPDSave();
  303   1          return true;
  304   1      }
  305          
  306          
  307          void PDProbe_Ack(BYTE *Buf, BYTE Len)
  308          {
  309   1          if (!ValidRtuFrame(Buf, Len))
  310   1          {
  311   2              //DebugMsg("Comm err\r\n",10);
  312   2              return;
  313   2          }
  314   1      
  315   1          memset(&ReadAckFrame, 0, sizeof(DEVICE_READ_ACK));
  316   1          memcpy(&ReadAckFrame, Buf, Len);
  317   1         
  318   1         if(ReadAckFrame.Address != SysParam.Pd_param.Address)
  319   1          {
  320   2              return;
  321   2          }
C251 COMPILER V5.60.0,  PD_Probe                                                           12/11/24  14:59:46  PAGE 6   

  322   1          switch(ReadAckFrame.FunctionCode)
  323   1          {      
  324   2              case CMD_READ_REG: 
  325   2              {
  326   3                  ReadPD_Ack(); 
  327   3                  Calc_PD_AlarmState();
  328   3                  My_PDDoserate = SysParam.Pd_param.s_DoseRate.DoseRate;
  329   3                  Set_PD_DoseRateUnit();
  330   3                  break;
  331   3              }
  332   2              case CMD_WRITE_REG:  WritePD_Ack() ;  break;
  333   2          }
  334   1      }
  335          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      1322     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =        40     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        12     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
