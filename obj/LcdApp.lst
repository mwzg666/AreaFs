C251 COMPILER V5.60.0,  LcdApp                                                             28/02/25  09:05:17  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE LcdApp
OBJECT MODULE PLACED IN .\obj\LcdApp.obj
COMPILER INVOKED BY: D:\KeilMDK\C251\BIN\C251.EXE Lcd\LcdApp.c XSMALL OPTIMIZE(0,SPEED) BROWSE INCDIR(.\Ads1110;.\Flash;
                    -.\mcp4725;.\IIC;.\MwPro;.\Uart;.\Lcd;.\ModBus;.\Probe;.\BSP;.\MwPro) PRINT(.\obj\LcdApp.lst) OBJECT(.\obj\LcdApp.obj) 

stmt  level    source

    1          //#include "pch.h"
    2          
    3          #include "main.h"
    4          #include "Lcd.h"
    5          #include "LcdApp.h"
    6          #include "cmd.h"
    7          
    8          
    9          //#include "SerialPort.h"
   10          //#include "SampDemo.h"
   11          //#include "SampDemoDlg.h"
   12          
   13          #define Log //((CSampDemoDlg *)theApp.m_pMainWnd)->AddLog
   14          
   15          #define TEMP_BUF_LEN  128
   16          BYTE xdata TempBuf[TEMP_BUF_LEN] = {0};
   17          
   18          WORD xdata ScaleBuf[SCALE_NUM] = {SPIN_SCALE0_VAL,SPIN_SCALE1_VAL,SPIN_SCALE2_VAL,SPIN_SCALE3_VAL,
   19                                              SPIN_SCALE4_VAL,SPIN_SCALE5_VAL,SPIN_SCALE6_VAL,SPIN_SCALE7_VAL,
   20                                              SPIN_SCALE8_VAL,SPIN_SCALE9_VAL,SPIN_SCALE10_VAL};
   21          
   22          SHOW_PARAM xdata ShowParam;
   23          SHOW_CPS xdata ShowCpsMode;
   24          
   25          RUN_INFO xdata RunInfo;
   26          DEV_INFO xdata DevInfo;
   27          
   28          bool NeedGetRet = false;
   29          BYTE DoseRateAlarm = 0; // 默认状态正常
   30          BYTE HisAlarm = 0;
   31          
   32          extern BYTE code VERSION;
   33          extern SYS_PARAM xdata SysParam;
   34          extern LP_SYSTEM_STTAE SysRunState;
   35          
   36          WORD code StatusPoint[3] = 
   37          {
   38              MP_DOSERATE_END,MP_SCALE_UNIT_END,MP_UNIT_END//0xA300,0xA400,0xA500,0xA600,0xA700,0xA100
   39          };
   40          
   41          WORD code TxtColor[3] = 
   42          {
   43              //正常     低剂量率       高剂量率                    //禁用 
   44              //绿色     黄色         红色                      //白色 
   45              0x07E8,0xFFE0,0xF800              //0x7E80,0xFFFF,
   46          };
   47          
   48          char code UnitText[3][8] =
   49          {
   50              "μSv/h",
   51              "mSv/h",
   52              "Sv/h"
   53          };
   54          
   55          void ShowDevInfo()
   56          {
   57   1          memset(&DevInfo, 0, sizeof(DEV_INFO));
   58   1      
C251 COMPILER V5.60.0,  LcdApp                                                             28/02/25  09:05:17  PAGE 2   

   59   1          sprintf(DevInfo.ID,"ID:%d", SysParam.s_General_Info.Address);
   60   1          sprintf(DevInfo.SoftVer,"%s", SysParam.VerSion);
   61   1          LcdCmd(LCD_CMD_WRITE, REG_DEV_ID, (BYTE *)&DevInfo, 22);
   62   1      }
   63          
   64          
   65          void GetRetCode()
   66          {
   67   1          BYTE len = 1;
   68   1      
   69   1          if (NeedGetRet)
   70   1          {
   71   2              LcdCmd(LCD_CMD_READ, REG_RETRUN, &len, 1);
   72   2          }
   73   1      }
   74          
   75          
   76          // 调整状态文字的颜色
   77          void StatusColor(bool force)
   78          {
   79   1          BYTE i;
   80   1          for (i=0;i<3;i++)
   81   1          {
   82   2              if ((DoseRateAlarm != HisAlarm) || force)
   83   2              {
   84   3                  delay_ms(200);
   85   3                  if((DoseRateAlarm == ALM_DOSERATE_PRE)||(DoseRateAlarm == ALM_DOSE_PRE))
   86   3                  {
   87   4                      SetTextColor(StatusPoint[i], SwWord(TxtColor[1]));
   88   4                  }
   89   3                  else if((DoseRateAlarm == ALM_DOSERATE_ERROR) ||(DoseRateAlarm == ALM_DOSE_ERROR)
   90   3                      ||(DoseRateAlarm == ALM_DOSE_OVER) )
   91   3                  {
   92   4                      SetTextColor(StatusPoint[i], SwWord(TxtColor[2]));
   93   4                  }
   94   3                  else
   95   3                  {
   96   4                      SetTextColor(StatusPoint[i], SwWord(TxtColor[0]));
   97   4                  }
   98   3              }
   99   2          }
  100   1      }
  101          
  102          void SetRunTime(DWORD tm)
  103          {
  104   1          WORD h,m,s;
  105   1          h = (WORD)(tm/3600);
  106   1          m = (tm%3600)/60;
  107   1          s = tm%60;
  108   1          //memset(RunInfo.RunTime,0,16);
  109   1          //sprintf((char *)RunInfo.RunTime, "%04d:%02d:%02d",h,m,s);
  110   1          //WriteParam();
  111   1      }
  112          
  113          void ShowDoseRate()
  114          {
  115   1          memcpy((char *)RunInfo.Name,(char *)SysParam.s_General_Info.Name,32);
  116   1          switch(ProbeSwitch)
  117   1          {
  118   2              case 0:
  119   2                      RunInfo.Cps1 = (DWORD)SysRunState.s_CPS.CPS1;
  120   2                      RunInfo.Cps2 = (DWORD)SysRunState.s_CPS.CPS2;
  121   2                      break;
  122   2              case 1:   
  123   2                      RunInfo.Cps1 = (DWORD)SysRunState.s_CPS.CPS1;
  124   2                      break;
C251 COMPILER V5.60.0,  LcdApp                                                             28/02/25  09:05:17  PAGE 3   

  125   2              case 2:
  126   2                      RunInfo.Cps1 = (DWORD)SysParam.Pd_param.s_DoseRate.Cps1;
  127   2                      break;
  128   2          }         
  129   1          LcdCmd(LCD_CMD_WRITE, REG_DOSERATE, (BYTE *)&RunInfo, sizeof(RUN_INFO));
  130   1      }
  131          
  132          //CPS数据显示
  133          void ShowCps()
  134          {
  135   1          if(SysParam.Cps_Enable)
  136   1          {
  137   2              switch(ProbeSwitch)
  138   2              {
  139   3                  case 0:
  140   3                      ShowModule(MP_CPS1_END,REG_CPS1);
  141   3                      SetTextIntegerNum(MP_CPS1_END,0x0207);
  142   3                      ShowModule(MP_CPS2_END,REG_CPS2);
  143   3                                      SetTextIntegerNum(MP_CPS2_END,0x0207);
  144   3                      break;
  145   3                  case 1:
  146   3                      ShowModule(MP_CPS1_END,REG_CPS1);
  147   3                      SetTextIntegerNum(MP_CPS1_END,0x0009);
  148   3                      break;
  149   3                  case 2:
  150   3                      ShowModule(MP_CPS1_END,REG_CPS1);
  151   3                      SetTextIntegerNum(MP_CPS1_END,0x0206);
  152   3                      break;
  153   3              }
  154   2          }
  155   1          else
  156   1          {
  157   2              HideModule(MP_CPS1_END);
  158   2              HideModule(MP_CPS2_END);
  159   2          }
  160   1      }
  161          
  162          //边框黑黄闪烁
  163          void ShowBorderY()
  164          {
  165   1          static BYTE t = 0;
  166   1          
  167   1          ShowIcon(REG_TOP_BORDER,1);
  168   1          ShowIcon(REG_LEFT_BORDER,1);   
  169   1          ShowIcon(REG_BELOW_BORDER,1);
  170   1          ShowIcon(REG_RIGHT_BORDER,1);
  171   1          t++;
  172   1          if(t>1)
  173   1          {   t = 0;
  174   2              ShowIcon(REG_TOP_BORDER,2);
  175   2              ShowIcon(REG_LEFT_BORDER,2);   
  176   2              ShowIcon(REG_BELOW_BORDER,2);
  177   2              ShowIcon(REG_RIGHT_BORDER,2);
  178   2          }
  179   1      }
  180          
  181          //边框黑红闪烁
  182          void ShowBorderR()
  183          {
  184   1          static BYTE t = 0;
  185   1          ShowIcon(REG_TOP_BORDER,1);
  186   1          ShowIcon(REG_LEFT_BORDER,1);   
  187   1          ShowIcon(REG_BELOW_BORDER,1);
  188   1          ShowIcon(REG_RIGHT_BORDER,1);
  189   1          t++;
  190   1          if(t>1)
C251 COMPILER V5.60.0,  LcdApp                                                             28/02/25  09:05:17  PAGE 4   

  191   1          {   t = 0;
  192   2              ShowIcon(REG_TOP_BORDER,3);
  193   2              ShowIcon(REG_LEFT_BORDER,3);   
  194   2              ShowIcon(REG_BELOW_BORDER,3);
  195   2              ShowIcon(REG_RIGHT_BORDER,3);
  196   2              
  197   2          }
  198   1      }
  199          
  200          //隐藏边框
  201          void HideBorder()
  202          {
  203   1          ShowIcon(REG_TOP_BORDER,0);
  204   1          ShowIcon(REG_LEFT_BORDER,0);   
  205   1          ShowIcon(REG_BELOW_BORDER,0);
  206   1          ShowIcon(REG_RIGHT_BORDER,0);
  207   1      }
  208          
  209          void SendCps()
  210          {  
  211   1          ShowCpsMode.Cps_Check = SwWord((WORD)SysParam.Cps_Check);
  212   1          ShowCpsMode.Cps_Enable = SwWord((WORD)SysParam.Cps_Enable);
  213   1          LcdCmd(LCD_CMD_WRITE, REG_CPS_CHECK, (BYTE *)&ShowCpsMode, sizeof(SHOW_CPS));
  214   1      }
  215          
  216          void SendParam()
  217          {
  218   1          switch(ProbeSwitch)
  219   1          {
  220   2              case 0:
  221   2              case 1: //memcpy(SysParam.s_General_Info.Name,SysParam.Lp_Param.Name,32);
  222   2                      //SysParam.s_General_Info.Address = SysParam.Lp_Param.address;
  223   2                      ShowParam.PreAlarmThres = SwDWord((DWORD)SysParam.Lp_Param.s_Alarm.DoseRatePreAlarm);
  224   2                      ShowParam.AlarmThres = SwDWord((DWORD)SysParam.Lp_Param.s_Alarm.DoseRateAlarm);
  225   2                      break;
  226   2              case 2: //memcpy(SysParam.s_General_Info.Name,SysParam.Pd_param.s_PdInfo.Name,32);    
  227   2                      //SysParam.s_General_Info.Address = SysParam.Pd_param.Address;
  228   2                      ShowParam.PreAlarmThres = SwDWord((DWORD)SysParam.Pd_param.s_Alarm.DoseRatePreAlarm);
  229   2                      ShowParam.AlarmThres = SwDWord((DWORD)SysParam.Pd_param.s_Alarm.DoseRateAlarm);
  230   2                      break;
  231   2          }
  232   1          
  233   1          //ShowParam.BkLight = SwWord((WORD)SysParam.BkLight);
  234   1          memcpy(ShowParam.Name,SysParam.s_General_Info.Name,32);
  235   1          ShowParam.Address = SwWord((WORD)SysParam.s_General_Info.Address);
  236   1          //memcpy(ShowParam.MP3Txt,SysParam.MP3Txt,112);
  237   1          
  238   1          LcdCmd(LCD_CMD_WRITE, REG_SYS_PARAM, (BYTE *)&ShowParam, sizeof(SHOW_PARAM));
  239   1      }
  240          
  241          
  242          // 获取修改后的时间
  243          void GetInputTime()
  244          {
  245   1          BYTE len = 7;
  246   1          NeedGetRet = true;
  247   1          //delay_ms(300);
  248   1          LcdCmd(LCD_CMD_READ, REG_DATE_TIME, &len, 1);
  249   1      }
  250          
  251          // 在时间设置界面写入当前时间
  252          void SetCurTime()
  253          {
  254   1          LCD_FRAME *pFrame;
  255   1          LCD_DATE_TIME  ldt;
  256   1          
C251 COMPILER V5.60.0,  LcdApp                                                             28/02/25  09:05:17  PAGE 5   

  257   1          BYTE dt[8] = {0};
  258   1          pFrame = (LCD_FRAME *)&RecvBuf1[LcdFrameloc];
  259   1          if (!CheckDataLen(4))
  260   1          {
  261   2              return;
  262   2          }
  263   1          
  264   1          memcpy(dt, &pFrame->Data[1], 8);
  265   1          
  266   1          ldt.Year = SwWord((WORD)(dt[0]/10));
  267   1          //ldt.YearL = SwWord((WORD)(dt[0]%10));
  268   1          ldt.Month = SwWord((WORD)dt[1]);
  269   1          ldt.Day   = SwWord((WORD)dt[2]);
  270   1      
  271   1          ldt.Hour   = SwWord((WORD)dt[4]);
  272   1          ldt.Minute = SwWord((WORD)dt[5]);
  273   1          ldt.Secend = SwWord((WORD)dt[6]);
  274   1      
  275   1          LcdCmd(LCD_CMD_WRITE, REG_DATE_TIME, (BYTE *)&ldt, sizeof(LCD_DATE_TIME));
  276   1          
  277   1      }
  278          
  279          void Cps_Check()
  280          {
  281   1          if(SysParam.Cps_Check)
  282   1          {
  283   2              ShowModule(MP_CPS_ONOFF_END,REG_CPS_ONOFF);  
  284   2              ShowControl();
  285   2          }
  286   1          else
  287   1          {
  288   2              HideModule(MP_CPS_ONOFF_END);
  289   2              HideControl();
  290   2          }
  291   1      }
  292          
  293          void ReadReg()
  294          {
  295   1          LCD_FRAME *pFrame = (LCD_FRAME *)&RecvBuf1[LcdFrameloc];
  296   1          WORD addr = SwWord(pFrame->Addr);
  297   1          //BYTE res;
  298   1          DebugInt(addr);
  299   1          
  300   1          switch (addr)
  301   1          {
  302   2              // 主界面
  303   2              //case REG_TIME_BTN: GetLcdTime();                            break;  // 点击时间
  304   2      
  305   2              // 修改时间
  306   2              //case REG_ADJ_TIME:   GetInputTime();                        break;    // 时间修改完成，点击了返
             -回按钮
  307   2              //case REG_DATE_TIME:  SetLcdTime();                          break;    // 修改屏幕RTC      
  308   2              //case LCD_REG_RTC:    SetCurTime();                          break;   // 获取屏幕时间返回     
  309   2              //CPS显示
  310   2              case REG_CPS_CHECK:  SysParam.Cps_Check = (BYTE)PopWord(); Cps_Check(); break;   // CPS通道显示按
             -钮
  311   2              case REG_CPS_ONOFF:  SysParam.Cps_Enable = (BYTE)PopWord();   break;   // CPS通道按钮
  312   2          }
  313   1      
  314   1      }
  315          
  316          
  317          void WriteReg()
  318          {
  319   1          #if 0
                   LCD_FRAME *pFrame = (LCD_FRAME *)&RecvBuf1[LcdFrameloc];
C251 COMPILER V5.60.0,  LcdApp                                                             28/02/25  09:05:17  PAGE 6   

                   CString str;
                   str.Format(_T("Write:0x%04X\r\n"), SwWord(pFrame->Addr));
                   Log(str);
                   #endif
  325   1      }
  326          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      1555     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =       390     ------
  xdata-const size     =    ------     ------
  edata size           =        43     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =       202     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
