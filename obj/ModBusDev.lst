C251 COMPILER V5.60.0,  ModBusDev                                                          12/11/24  14:59:46  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE ModBusDev
OBJECT MODULE PLACED IN .\obj\ModBusDev.obj
COMPILER INVOKED BY: D:\KeilMDK\C251\BIN\C251.EXE ModBus\ModBusDev.c XSMALL OPTIMIZE(0,SPEED) BROWSE INCDIR(.\Ads1110;.\
                    -Flash;.\mcp4725;.\IIC;.\MwPro;.\Uart;.\Lcd;.\ModBus;.\Probe;.\BSP;.\MwPro) PRINT(.\obj\ModBusDev.lst) OBJECT(.\obj\ModBu
                    -sDev.obj) 

stmt  level    source

    1          #include <stdio.h>
    2          #include <string.h>
    3          
    4          
    5          #include "main.h"
    6          #include "Lcd.h"
    7          #include "LcdApp.h"
    8          #include "ModBus.h"
    9          #include "ModBusDev.h"
   10          #include "uart.h"
   11          
   12          MODBUS_PD_PARAM xdata ModBusPD_Param;
   13          
   14          extern SYS_PARAM xdata SysParam;
   15          
   16          
   17          /*
   18          ModBus 帧格式
   19          1. 发送帧
   20          地址           命令     寄存器    寄存器数量    数据                                             CRC   
   21          0A(固定值)     Cmd(1)   RX(2)     n(2)          无数据表示读取、有数据表示写对应的寄存器 
   22          
   23          数据定义:  长度 + 数据
   24                     n*2    dat(n*2)
   25          
   26          2. 应答帧 -- 返回数据
   27          地址           命令   数据长度    数据      CRC   
   28          0A(固定值)     Cmd    n(1)        dat(n)
   29          
   30          3. 应答帧 -- 返回状态
   31          地址           命令   寄存器   寄存器数量     CRC   
   32          0A(固定值)     Cmd    Rx(2)    n(2)                       
   33          */
   34          
   35          
   36          DEVICE_READ_ACK xdata  DevReadAck;   
   37          DEVICE_WRITE_ACK xdata DevWriteAck;
   38          
   39          HOST_SEND_FRAME xdata RecvFrame;   
   40          
   41          
   42          // 把浮点数转换为大端打包到发送数据区
   43          void PackageFloatValue(WORD Offset, float val)
   44          {
   45   1          BYTE temp[4] = {0};
   46   1          FloatToBytes(val,temp);
   47   1          memcpy(&DevReadAck.Data[Offset], temp, 4);  
   48   1      }
   49          
   50          void PackageDWordValue(WORD Offset, DWORD val)
   51          {
   52   1          DWORD temp;
   53   1          temp = SwEndian(val);
   54   1          memcpy(&DevReadAck.Data[Offset], &temp, 4);  
   55   1      }
   56          
   57          
C251 COMPILER V5.60.0,  ModBusDev                                                          12/11/24  14:59:46  PAGE 2   

   58          void PackageWordValue(WORD Offset, WORD val)
   59          {
   60   1          BYTE temp[2] = {0};
   61   1          temp[0] = (BYTE)(val >> 8);
   62   1          temp[1] = (BYTE)val;
   63   1          memcpy(&DevReadAck.Data[Offset], temp, 2);  
   64   1      }
   65          #if 0
               // 把寄存器值包装到发送缓存
               bool PackageReg(WORD Reg, WORD Count)
               {
                   DWORD offset;
                   BYTE *p;
               
                   if (Count > 128)
                   {
                       return false;
                   }
               
                   if (Reg >= MODBUS_INFO_ADD)
                   {
                       offset = (Reg - MODBUS_INFO_ADD)*2;
                       if (offset >= sizeof(MODBUS_INFO))
                       {
                           return false;
                       }
                       
                       p = (BYTE *)&ModBusInfo;
                       memcpy(DevReadAck.Data, &p[offset], Count*2);  
                   }
                   else if (Reg >= MODBUS_STATUS_ADD)
                   {
                       offset = (Reg - MODBUS_STATUS_ADD)*2;
               //        if (offset >= sizeof(MODBUS_STATUS))
               //        {
               //            return false;
               //        }
                       
                       //p = (BYTE *)&ModBusStatus;
                       memcpy(DevReadAck.Data, &p[offset], Count*2);  
                   }
                   else if (Reg >= MODBUS_PARAM_ADD)
                   {
                       offset = (Reg - MODBUS_PARAM_ADD)*2;
                       if (offset >= sizeof(MODBUS_PARAM))
                       {
                           return false;
                       }
                       
                       p = (BYTE *)&ModBusParam;
                       memcpy(DevReadAck.Data, &p[offset], Count*2); 
                   }
                   else
                   {
                       return false;
                   }
               
                   return true;
               }
               #endif
  118          BYTE ReadAck(BYTE Mode)
  119          {
  120   1          WORD i = 0;
  121   1          WORD crc,SendLen;
  122   1          memset(&DevReadAck, 0, sizeof(DEVICE_READ_ACK));
  123   1          
C251 COMPILER V5.60.0,  ModBusDev                                                          12/11/24  14:59:46  PAGE 3   

  124   1          DevReadAck.Address = RecvFrame.Address; 
  125   1          DevReadAck.FunctionCode = RecvFrame.FunctionCode;
  126   1          
  127   1          SendLen = 2;
  128   1      
  129   1          DevReadAck.DataLen = RecvFrame.RegCount*2; 
  130   1          SendLen ++;
  131   1          
  132   1          //PackageReg(RecvFrame.RegAddr, RecvFrame.RegCount);
  133   1          SendLen += DevReadAck.DataLen;
  134   1          
  135   1          // 计算CRC , 并添加到数据后面
  136   1          i = DevReadAck.DataLen;
  137   1          crc = CRC16Calc((BYTE *)&DevReadAck, SendLen);
  138   1          DevReadAck.Data[i]  = (BYTE)(crc);
  139   1          DevReadAck.Data[i+1] = (BYTE)(crc>>8);
  140   1          SendLen += 2; 
  141   1          
  142   1      
  143   1          if (Mode == RS485)
  144   1          {
  145   2              Uart4Send((BYTE *)&DevReadAck, (BYTE)SendLen);
  146   2          }
  147   1          return true;
  148   1      }
  149          
  150          
  151          // 发送写命令应答
  152          void WriteAck(BYTE Mode)
  153          {
  154   1          WORD crc;
  155   1          memset(&DevWriteAck, 0, sizeof(DEVICE_WRITE_ACK));
  156   1          
  157   1          DevWriteAck.Address = RecvFrame.Address;  //Param.DevAddr;
  158   1          DevWriteAck.FunctionCode = RecvFrame.FunctionCode;
  159   1          DevWriteAck.RegAddr = RegSw(RecvFrame.RegAddr);
  160   1          DevWriteAck.RegCount = RegSw(RecvFrame.RegCount);
  161   1      
  162   1          crc = CRC16Calc((BYTE *)&DevWriteAck, 6);
  163   1          DevWriteAck.Crc = crc;
  164   1      
  165   1          if (Mode == RS485)
  166   1          {
  167   2              Uart4Send((BYTE *)&DevWriteAck, sizeof(DEVICE_WRITE_ACK));
  168   2          }
  169   1      }
  170          
  171          
  172          void ModBusSaveParam()
  173          {
  174   1          WriteParam();
  175   1      }
  176          
  177          // 把接收到的数据加载到寄存器中
  178          bool WriteRegValue(WORD Reg, WORD Count)
  179          {
  180   1          #if 0
                   BYTE *p;
                   int len,offset;
                   
                   // 写设备地址
                   if ((Reg == MODBUS_INFO_ADD) && (Count == 1))
                   {
                       SysParam.Address = RecvFrame.Data[2];
                       WriteParam();
                       return true;
C251 COMPILER V5.60.0,  ModBusDev                                                          12/11/24  14:59:46  PAGE 4   

                   }
               
                   if (Reg >= MODBUS_PARAM_ADD) 
                   {
                       len = sizeof(MODBUS_PARAM);
                       offset = (Reg - MODBUS_PARAM_ADD) * 2;
                       if ( (offset + Count * 2) > len )
                       {
                           return false;
                       }
                       p = (BYTE *)&ModBusParam;
                       memcpy(&p[offset], &RecvFrame.Data[1], Count*2);
                       ModBusSaveParam();
                       return true;
                   }
                   #endif
  206   1          return false;
  207   1      
  208   1      }
*** WARNING C47 IN LINE 178 OF ModBus\ModBusDev.c: 'Reg': unreferenced parameter
*** WARNING C47 IN LINE 178 OF ModBus\ModBusDev.c: 'Count': unreferenced parameter
  209          
  210          
  211          // 设寄存器值
  212          void SetRegValue(BYTE Mode)
  213          {
  214   1          if (RecvFrame.Data[0] == 0)
  215   1          {
  216   2              return;
  217   2          }
  218   1      
  219   1          if (WriteRegValue(RecvFrame.RegAddr, RecvFrame.RegCount))
  220   1          {
  221   2              WriteAck(Mode);
  222   2          }
  223   1      }
  224          
  225          
  226          void HndModBusRecv(BYTE Mode, BYTE *buf, BYTE len)
  227          {
  228   1          if (!ValidRtuFrame(buf, len))
  229   1          {
  230   2              return;
  231   2          }
  232   1      
  233   1          memset(&RecvFrame, 0, sizeof(HOST_SEND_FRAME));
  234   1          memcpy(&RecvFrame, buf, len);
  235   1          if (RecvFrame.Address != SysParam.s_General_Info.Address)
  236   1          {
  237   2              return;
  238   2          }
  239   1      
  240   1          switch(RecvFrame.FunctionCode)
  241   1          {
  242   2              case CMD_READ_REG: ReadAck(Mode);  break;
  243   2              case CMD_WRITE_REG: SetRegValue(Mode);  break;
  244   2          }
  245   1      }
  246          
  247          
  248          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       671     ------
  ecode size           =    ------     ------
C251 COMPILER V5.60.0,  ModBusDev                                                          12/11/24  14:59:46  PAGE 5   

  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =       766     ------
  xdata-const size     =    ------     ------
  edata size           =        43     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =         6     ------
End of Module Information.


C251 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
