C251 COMPILER V5.60.0,  system                                                             12/11/24  14:59:46  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE system
OBJECT MODULE PLACED IN .\obj\system.obj
COMPILER INVOKED BY: D:\KeilMDK\C251\BIN\C251.EXE BSP\system.c XSMALL OPTIMIZE(0,SPEED) BROWSE INCDIR(.\Ads1110;.\Flash;
                    -.\mcp4725;.\IIC;.\MwPro;.\Uart;.\Lcd;.\ModBus;.\Probe;.\BSP;.\MwPro) PRINT(.\obj\system.lst) OBJECT(.\obj\system.obj) 

stmt  level    source

    1          #include "main.h"
    2          #include "uart.h"
    3          #include "system.h"
    4          
    5          u16  Timer0Cnt = 0;
    6          u32  Pluse1Cnt = 0;
    7          u32  Pluse3Cnt = 0;
    8          u32  Pluse4Cnt = 0;
    9          u16  IDLCnt = 0;
   10          
   11          u8   LowOverCnt1 = 0;
   12          u8   LowOverCnt3 = 0;
   13          u8   HightOverCnt4 = 0;
   14          
   15          extern LP_SYSTEM_STTAE SysRunState;
   16          extern u16 Eth_delaytime;
   17          extern bool Eth_delayflag;
   18          
   19          void SysInit()
   20          {
   21   1          HIRCCR = 0x80;           // 启动内部高速IRC
   22   1          while(!(HIRCCR & 1));
   23   1          CLKSEL = 0x00; 
   24   1      }
   25          
   26          
   27          //========================================================================
   28          // 函数名称: void Timer0_Init(void)     
   29          // 函数功能: 在时钟源为11.0592MHz下TIMER0初始化为10ms定时
   30          // 入口参数: @无
   31          // 函数返回: 无
   32          // 当前版本: VER1.0
   33          // 修改日期: 2024.6.13
   34          // 当前作者:
   35          // 其他备注: 
   36          //========================================================================
   37          void Timer0_Init(void)          //100毫秒@6MHz
   38          {
   39   1              AUXR = 0x00;    //Timer0 set as 12T, 16 bits timer auto-reload, 
   40   1          TH0 = (u8)(Timer0_Reload / 256);
   41   1          TL0 = (u8)(Timer0_Reload % 256);
   42   1          ET0 = 1;    //Timer0 interrupt enable
   43   1          TR0 = 1;    //Tiner0 run
   44   1          
   45   1          // 中断优先级3
   46   1          PT0  = 0;
   47   1          PT0H = 0;
   48   1      
   49   1      }
   50          
   51          //========================================================================
   52          // 函数名称: void Timer3_Init(void)
   53          // 函数功能: TIMER3初始化为下降沿计数模式
   54          // 入口参数: @无
   55          // 函数返回: 无
   56          // 当前版本: VER1.0
   57          // 修改日期: 2024.6.13
   58          // 当前作者:
C251 COMPILER V5.60.0,  system                                                             12/11/24  14:59:46  PAGE 2   

   59          // 其他备注: 
   60          //========================================================================
   61          void Timer3_Init(void)
   62          {
   63   1          T3L = 0x00;
   64   1          T3H = 0x00;
   65   1          T4T3M |= 0x0C;
   66   1          IE2 |= 0x20;             //Timer3 interrupt enable
   67   1      }
   68          
   69          
   70          
   71          //========================================================================
   72          // 函数名称: void Timer4_Init(void)
   73          // 函数功能: TIMER4初始化为下降沿计数模式
   74          // 入口参数: @无
   75          // 函数返回: 无
   76          // 当前版本: VER1.0
   77          // 修改日期: 2024.6.13
   78          // 当前作者:
   79          // 其他备注: 
   80          //========================================================================
   81          void Timer4_Init(void)
   82          {
   83   1          T4L = 0x00;
   84   1          T4H = 0x00;
   85   1          T4T3M |= 0xC0;
   86   1          IE2 |= 0x40;             //Timer4 interrupt enable
   87   1      
   88   1      }
   89          
   90          //========================================================================
   91          // 函数名称: void Timer1_Init(void)     
   92          // 函数功能: TIMER1初始化为下降沿计数模式
   93          // 入口参数: @无
   94          // 函数返回: 无
   95          // 当前版本: VER1.0
   96          // 修改日期: 2024.6.13
   97          // 当前作者:
   98          // 其他备注: 
   99          //========================================================================
  100          void Timer1_Init(void)          //10毫秒@11.0592MHz
  101          {
  102   1              TL1 = 0x00;                             //设置定时初始值
  103   1              TH1 = 0x00;                             //设置定时初始值
  104   1              TMOD = 0x50;                            //清除TF1标志
  105   1              TR1 = 1;                                //定时器1开始计时
  106   1              ET1 = 1;                                //使能定时器1中断
  107   1      }
  108          
  109          u32 GetNaICounter(void)
  110          {
  111   1              u32 Return = 0;
  112   1          Pluse1Cnt =((u32)LowOverCnt1*65536) | (u32)((u32)TH1*256+TL1) ;
  113   1          Return =Pluse1Cnt;
  114   1          //TR1 = 0;
  115   1          TH1 = 0;
  116   1          TL1 = 0;
  117   1          //TR1 = 1;
  118   1          //printf("Pluse1Cnt = %d\r\n",Pluse1Cnt);
  119   1          LowOverCnt1 = 0;
  120   1              Pluse1Cnt = 0;
  121   1              return Return;
  122   1      }
  123          
  124          //========================================================================
C251 COMPILER V5.60.0,  system                                                             12/11/24  14:59:46  PAGE 3   

  125          // 函数名称: u32 GetCounter(void)
  126          // 函数功能: 获取TIMER3的脉冲计数
  127          // 入口参数: @无
  128          // 函数返回: 脉冲计数的值
  129          // 当前版本: VER1.0
  130          // 修改日期: 2024.6.13
  131          // 当前作者:
  132          // 其他备注: 
  133          //========================================================================
  134          u32 GetCounter(void)
  135          {
  136   1              u32 Return = 0;
  137   1          Pluse3Cnt =((u32)LowOverCnt3*65536) | (u32)((u32)T3H*256+T3L) ;
  138   1          Return =Pluse3Cnt;
  139   1          T3R = 0;
  140   1          T3H = 0;
  141   1          T3L = 0;
  142   1          T3R = 1;
  143   1          LowOverCnt3 = 0;
  144   1              Pluse3Cnt = 0;
  145   1              return Return;
  146   1      }
  147          
  148          u32 GetHightCounter(void)
  149          {
  150   1              u32 Return = 0; 
  151   1          Pluse4Cnt = ((u32)HightOverCnt4*65536) | (u32)((u32)T4H*256+T4L) ;
  152   1          Return = Pluse4Cnt;
  153   1      
  154   1          T4R = 0;
  155   1          T4H = 0;
  156   1          T4L = 0;
  157   1          T4R = 1;
  158   1          HightOverCnt4 = 0;
  159   1              Pluse4Cnt = 0;
  160   1              return Return;
  161   1      }
  162          
  163          void Timer0_Isr (void) interrupt 1   //Timer0中断
  164          {
  165   1          Timer0Cnt ++;
  166   1          if(SysRunState.keydownFlag == 1)
  167   1          {
  168   2               SysRunState.keydownTime++;//10ms*n
  169   2          }
  170   1      //  if(Eth_delayflag)
  171   1      //    {
  172   1      //        Eth_delaytime -= 10;
  173   1      //        if(!Eth_delaytime)
  174   1      //        {
  175   1      //            Eth_delayflag = 0;
  176   1      //        }
  177   1      //    }
  178   1      }
  179          
  180          void Timer1_Isr() interrupt 3      //Timer1中断
  181          {
  182   1          LowOverCnt1++;
  183   1         
  184   1      }
  185          
  186          void Timer3_Isr() interrupt 19      //Timer3中断
  187          {
  188   1          LowOverCnt3++;
  189   1         
  190   1      }
C251 COMPILER V5.60.0,  system                                                             12/11/24  14:59:46  PAGE 4   

  191          
  192          void Timer4_Isr() interrupt 20      //Timer4中断
  193          {
  194   1          HightOverCnt4++;
  195   1         
  196   1      }
  197          
  198          
  199          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       461     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =        31     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        51     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
